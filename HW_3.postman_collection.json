{
	"info": {
		"_postman_id": "6bb2e651-81c2-4e51-ae3c-b2e76462a7cd",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp_JSON = pm.response.json();\r",
							"pm.environment.set(\"token\", resp_JSON.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "nigol",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\"\r",
							"                        },\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"pm.test(\"JSON structure\", function() {\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(tv4.error)\r",
							"\r",
							"// Коэффициенты умножения salary.\r",
							"var salary = jsonData.person.u_name[1]\r",
							"\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check u_salary_1.5_year\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*4);\r",
							"});\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 33,\r\n    \"salary\": 1000,\r\n    \"name\": \"Olga\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": [\r",
							"            { \r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"        ]\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"JSON structure\", function() {\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(tv4.error)\r",
							"\r",
							"// Проверить результат перемножения salary на коэффициент.\r",
							"var jsonData = pm.response.json();\r",
							"var salary = jsonData.salary[0]\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*2\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*3\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(salary*3);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент массива salary больше 1-го и 0-го;\r",
							"pm.test('Salary comparision', function () {\r",
							"    pm.expect(jsonData.salary[0] < jsonData.salary[1] < jsonData.salary[2]).to.be.true;\r",
							"});\r",
							"\r",
							"//  Второй вариант проверки, что 2-й элемент массива salary больше 1-го и 0-го;\r",
							"pm.test('Salary comparision 2', function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(jsonData.salary[0]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"JSON structure\", function() {\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(tv4.error)\r",
							"\r",
							"// Коэффициенты умножения weight.\r",
							"var jsonData = pm.response.json();\r",
							"var weight = request.data.weight\r",
							"var daily_food = jsonData.daily_food\r",
							"var daily_sleep = jsonData.daily_sleep\r",
							"\r",
							"pm.test(\"Check weight\", function () {\r",
							"    pm.expect(request.data.weight).to.eql(weight);\r",
							"});\r",
							"\r",
							"pm.test(\"Check daily_food\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Check daily_sleep\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "57",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"array\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"array\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"array\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"array\"\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"            },\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"JSON structure\", function() {\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//Проверить что занчение поля name = значению переменной name из окружения\r",
							"var resp_JSON = pm.response.json();\r",
							"pm.environment.set(\"name\", resp_JSON.name)\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var jsonData = pm.response.json();\r",
							"var age = jsonData.age\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(pm.response.json().age).to.eql(age);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Забрать любой объект из присланного списка, используйте js random. В объекте взять Cur_ID и передать через окружение в следующий запрос.\r",
							"var resp_JSON = pm.response.json();\r",
							"var random = resp_JSON[Math.floor(Math.random()*resp_JSON.length)];\r",
							"console.log(\"____+++\", random);\r",
							"\r",
							"var Cur_ID = random.Cur_ID\r",
							"pm.environment.set(\"Cur_ID\", Cur_ID);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"Cur_Abbreviation\" :\r",
							"        {\r",
							"        \"type\" : \"string\"\r",
							"    },\r",
							"    \"Cur_ID\" : \r",
							"    {\r",
							"        \"type\" : \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\" : \r",
							"    {\r",
							"        \"type\" : \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\" :\r",
							"     {\r",
							"        \"type\" : \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\" : \r",
							"    {\r",
							"        \"type\" : \"integer\"\r",
							"    },\r",
							"    \"Date\" :\r",
							"    { \r",
							"        \"type\" : \"string\"\r",
							"    },\r",
							"    },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"JSON structure\", function() {\r",
							"    pm.expect(tv4.validate (jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}