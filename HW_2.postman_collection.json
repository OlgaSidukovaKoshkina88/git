{
	"info": {
		"_postman_id": "75c16f8b-e82b-410c-a46e-9aed0ae11ef0",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Manual name response = request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Olga\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Manual age response = request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Manual salary response = request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (salary забрать из request.)\r",
							"pm.test(\"Name response = name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (salary забрать из request.)\r",
							"pm.test(\"Age response = age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary response = salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.data.salary);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"var request_Data = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response = name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request_Data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age response = age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request_Data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary response = salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request_Data.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"var dog = jsonData.family.pets.dog\r",
							"//console.log(dog)\r",
							"\r",
							"pm.test(\"dog_have_name\", function (){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"})\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_have_age\", function (){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"})\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name\", function (){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age\", function (){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(+4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"var request_Data = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response = name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request_Data.name);\r",
							"});\r",
							"//console.log('request_Data', request_Data.name)\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age response = age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+request_Data.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(request_Data.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[\"1\"])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[\"2\"])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"response salary 1000 = salary request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+request_Data.salary);\r",
							"});\r",
							"//console.log(\"Salary\", request_Data.salary)\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"response salary 2000 = salary*2 request\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+request_Data.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"response salary 3000 = salary*3 request\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+request_Data.salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age)\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0])\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let count = 0; count < jsonData.salary.length; count += 1) {\r",
							"    //console.log('salary count', jsonData.salary[count]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var reqData = request.data\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"qa_salary_after_3.5_years\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"})\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql+(request.data.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql+(request.data.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql+(request.data.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql+(request.data.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql+(request.data.salary*3.8);\r",
							"});\r",
							"\r",
							"// ЧТО-ТО НЕ ТАК, Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql+(request.data.salary); //ПРИ изменении элемента в jsonData тест все равно проходит\r",
							"});\r",
							"console.log(jsonData.person.u_name[1])\r",
							"console.log+(request.data.salary)\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql+(request.data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql+(request.data.salary);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}